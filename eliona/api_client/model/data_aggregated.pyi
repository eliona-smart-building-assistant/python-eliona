# coding: utf-8

"""
    Eliona API

    API to access Eliona Smart Building Assistant  # noqa: E501

    The version of the OpenAPI document: 2.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eliona.api_client import schemas  # noqa: F401


class DataAggregated(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Aggregated data combines multiple data points for a periodical raster
    """


    class MetaOapg:
        required = {
            "subtype",
            "assetId",
            "raster",
            "id",
        }
        
        class properties:
            assetId = schemas.IntSchema
        
            @staticmethod
            def subtype() -> typing.Type['DataSubtype']:
                return DataSubtype
            
            
            class raster(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def S1(cls):
                    return cls("S1")
                
                @schemas.classproperty
                def S2(cls):
                    return cls("S2")
                
                @schemas.classproperty
                def S3(cls):
                    return cls("S3")
                
                @schemas.classproperty
                def S4(cls):
                    return cls("S4")
                
                @schemas.classproperty
                def S5(cls):
                    return cls("S5")
                
                @schemas.classproperty
                def S6(cls):
                    return cls("S6")
                
                @schemas.classproperty
                def S10(cls):
                    return cls("S10")
                
                @schemas.classproperty
                def S12(cls):
                    return cls("S12")
                
                @schemas.classproperty
                def S15(cls):
                    return cls("S15")
                
                @schemas.classproperty
                def S20(cls):
                    return cls("S20")
                
                @schemas.classproperty
                def S30(cls):
                    return cls("S30")
                
                @schemas.classproperty
                def M1(cls):
                    return cls("M1")
                
                @schemas.classproperty
                def M2(cls):
                    return cls("M2")
                
                @schemas.classproperty
                def M3(cls):
                    return cls("M3")
                
                @schemas.classproperty
                def M4(cls):
                    return cls("M4")
                
                @schemas.classproperty
                def M5(cls):
                    return cls("M5")
                
                @schemas.classproperty
                def M6(cls):
                    return cls("M6")
                
                @schemas.classproperty
                def M10(cls):
                    return cls("M10")
                
                @schemas.classproperty
                def M12(cls):
                    return cls("M12")
                
                @schemas.classproperty
                def M15(cls):
                    return cls("M15")
                
                @schemas.classproperty
                def M20(cls):
                    return cls("M20")
                
                @schemas.classproperty
                def M30(cls):
                    return cls("M30")
                
                @schemas.classproperty
                def H1(cls):
                    return cls("H1")
                
                @schemas.classproperty
                def H2(cls):
                    return cls("H2")
                
                @schemas.classproperty
                def H3(cls):
                    return cls("H3")
                
                @schemas.classproperty
                def H4(cls):
                    return cls("H4")
                
                @schemas.classproperty
                def H6(cls):
                    return cls("H6")
                
                @schemas.classproperty
                def H8(cls):
                    return cls("H8")
                
                @schemas.classproperty
                def H12(cls):
                    return cls("H12")
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("DAY")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("WEEK")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
                
                @schemas.classproperty
                def QUARTER(cls):
                    return cls("QUARTER")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("YEAR")
                
                @schemas.classproperty
                def DECADE(cls):
                    return cls("DECADE")
                
                @schemas.classproperty
                def CENTURY(cls):
                    return cls("CENTURY")
            aggregationId = schemas.IntSchema
            attribute = schemas.StrSchema
            
            
            class timestamp(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timestamp':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class count(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class average(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'average':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sum(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class first(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class min(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'min':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class max(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class last(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastTimestamp(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastTimestamp':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class assetTypeName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assetTypeName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "assetId": assetId,
                "subtype": subtype,
                "raster": raster,
                "aggregationId": aggregationId,
                "attribute": attribute,
                "timestamp": timestamp,
                "count": count,
                "average": average,
                "sum": sum,
                "first": first,
                "min": min,
                "max": max,
                "last": last,
                "lastTimestamp": lastTimestamp,
                "assetTypeName": assetTypeName,
            }
    
    subtype: 'DataSubtype'
    assetId: MetaOapg.properties.assetId
    raster: MetaOapg.properties.raster
    id: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raster"]) -> MetaOapg.properties.raster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationId"]) -> MetaOapg.properties.aggregationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average"]) -> MetaOapg.properties.average: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sum"]) -> MetaOapg.properties.sum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first"]) -> MetaOapg.properties.first: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last"]) -> MetaOapg.properties.last: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTimestamp"]) -> MetaOapg.properties.lastTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetTypeName"]) -> MetaOapg.properties.assetTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "raster", "aggregationId", "attribute", "timestamp", "count", "average", "sum", "first", "min", "max", "last", "lastTimestamp", "assetTypeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raster"]) -> MetaOapg.properties.raster: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationId"]) -> typing.Union[MetaOapg.properties.aggregationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> typing.Union[MetaOapg.properties.attribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union[MetaOapg.properties.average, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sum"]) -> typing.Union[MetaOapg.properties.sum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first"]) -> typing.Union[MetaOapg.properties.first, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last"]) -> typing.Union[MetaOapg.properties.last, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTimestamp"]) -> typing.Union[MetaOapg.properties.lastTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetTypeName"]) -> typing.Union[MetaOapg.properties.assetTypeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "raster", "aggregationId", "attribute", "timestamp", "count", "average", "sum", "first", "min", "max", "last", "lastTimestamp", "assetTypeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subtype: 'DataSubtype',
        assetId: typing.Union[MetaOapg.properties.assetId, decimal.Decimal, int, ],
        raster: typing.Union[MetaOapg.properties.raster, str, ],
        id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        aggregationId: typing.Union[MetaOapg.properties.aggregationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attribute: typing.Union[MetaOapg.properties.attribute, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, None, str, datetime, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        average: typing.Union[MetaOapg.properties.average, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sum: typing.Union[MetaOapg.properties.sum, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        first: typing.Union[MetaOapg.properties.first, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        min: typing.Union[MetaOapg.properties.min, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        max: typing.Union[MetaOapg.properties.max, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        last: typing.Union[MetaOapg.properties.last, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lastTimestamp: typing.Union[MetaOapg.properties.lastTimestamp, None, str, datetime, schemas.Unset] = schemas.unset,
        assetTypeName: typing.Union[MetaOapg.properties.assetTypeName, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataAggregated':
        return super().__new__(
            cls,
            *args,
            subtype=subtype,
            assetId=assetId,
            raster=raster,
            id=id,
            aggregationId=aggregationId,
            attribute=attribute,
            timestamp=timestamp,
            count=count,
            average=average,
            sum=sum,
            first=first,
            min=min,
            max=max,
            last=last,
            lastTimestamp=lastTimestamp,
            assetTypeName=assetTypeName,
            _configuration=_configuration,
            **kwargs,
        )

from eliona/api_client.model.data_subtype import DataSubtype
