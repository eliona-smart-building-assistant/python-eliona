# coding: utf-8

"""
    Eliona API

    API to access Eliona Smart Building Assistant  # noqa: E501

    The version of the OpenAPI document: 2.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eliona.api_client import schemas  # noqa: F401


class MbusAgentDeviceSpecific(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specific device for MBUS agents
    """


    class MetaOapg:
        
        class properties:
            
            
            class manufacturer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'manufacturer':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class model(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'model':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class address(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class secAddress(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secAddress':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class raster(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'raster':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class maxFail(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maxFail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class maxRetry(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maxRetry':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sendNke(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sendNke':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class appResetSubcode(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appResetSubcode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class multiFrames(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'multiFrames':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "manufacturer": manufacturer,
                "model": model,
                "address": address,
                "secAddress": secAddress,
                "raster": raster,
                "maxFail": maxFail,
                "maxRetry": maxRetry,
                "sendNke": sendNke,
                "appResetSubcode": appResetSubcode,
                "multiFrames": multiFrames,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secAddress"]) -> MetaOapg.properties.secAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raster"]) -> MetaOapg.properties.raster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxFail"]) -> MetaOapg.properties.maxFail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxRetry"]) -> MetaOapg.properties.maxRetry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendNke"]) -> MetaOapg.properties.sendNke: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appResetSubcode"]) -> MetaOapg.properties.appResetSubcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiFrames"]) -> MetaOapg.properties.multiFrames: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["manufacturer", "model", "address", "secAddress", "raster", "maxFail", "maxRetry", "sendNke", "appResetSubcode", "multiFrames", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufacturer"]) -> typing.Union[MetaOapg.properties.manufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secAddress"]) -> typing.Union[MetaOapg.properties.secAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raster"]) -> typing.Union[MetaOapg.properties.raster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxFail"]) -> typing.Union[MetaOapg.properties.maxFail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxRetry"]) -> typing.Union[MetaOapg.properties.maxRetry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendNke"]) -> typing.Union[MetaOapg.properties.sendNke, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appResetSubcode"]) -> typing.Union[MetaOapg.properties.appResetSubcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiFrames"]) -> typing.Union[MetaOapg.properties.multiFrames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["manufacturer", "model", "address", "secAddress", "raster", "maxFail", "maxRetry", "sendNke", "appResetSubcode", "multiFrames", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        manufacturer: typing.Union[MetaOapg.properties.manufacturer, None, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, None, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        secAddress: typing.Union[MetaOapg.properties.secAddress, None, str, schemas.Unset] = schemas.unset,
        raster: typing.Union[MetaOapg.properties.raster, None, str, schemas.Unset] = schemas.unset,
        maxFail: typing.Union[MetaOapg.properties.maxFail, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxRetry: typing.Union[MetaOapg.properties.maxRetry, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sendNke: typing.Union[MetaOapg.properties.sendNke, None, bool, schemas.Unset] = schemas.unset,
        appResetSubcode: typing.Union[MetaOapg.properties.appResetSubcode, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        multiFrames: typing.Union[MetaOapg.properties.multiFrames, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MbusAgentDeviceSpecific':
        return super().__new__(
            cls,
            *args,
            manufacturer=manufacturer,
            model=model,
            address=address,
            secAddress=secAddress,
            raster=raster,
            maxFail=maxFail,
            maxRetry=maxRetry,
            sendNke=sendNke,
            appResetSubcode=appResetSubcode,
            multiFrames=multiFrames,
            _configuration=_configuration,
            **kwargs,
        )
