# coding: utf-8

"""
    Eliona API

    API to access Eliona Smart Building Assistant  # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eliona.api_client import schemas  # noqa: F401


class Aggregation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Defines the aggregation of data points
    """


    class MetaOapg:
        required = {
            "mode",
            "subtype",
            "assetId",
        }
        
        class properties:
            assetId = schemas.IntSchema
        
            @staticmethod
            def subtype() -> typing.Type['DataSubtype']:
                return DataSubtype
            
            
            class mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AVG(cls):
                    return cls("avg")
                
                @schemas.classproperty
                def SUM(cls):
                    return cls("sum")
                
                @schemas.classproperty
                def CUSUM(cls):
                    return cls("cusum")
            
            
            class id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            attribute = schemas.StrSchema
            
            
            class raster(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "S1": "S1",
                        "S2": "S2",
                        "S3": "S3",
                        "S4": "S4",
                        "S5": "S5",
                        "S6": "S6",
                        "S10": "S10",
                        "S12": "S12",
                        "S15": "S15",
                        "S20": "S20",
                        "S30": "S30",
                        "M1": "M1",
                        "M2": "M2",
                        "M3": "M3",
                        "M4": "M4",
                        "M5": "M5",
                        "M6": "M6",
                        "M10": "M10",
                        "M12": "M12",
                        "M15": "M15",
                        "M20": "M20",
                        "M30": "M30",
                        "H1": "H1",
                        "H2": "H2",
                        "H3": "H3",
                        "H4": "H4",
                        "H6": "H6",
                        "H8": "H8",
                        "H12": "H12",
                        "DAY": "DAY",
                        "WEEK": "WEEK",
                        "MONTH": "MONTH",
                        "QUARTER": "QUARTER",
                        "YEAR": "YEAR",
                        "DECADE": "DECADE",
                        "CENTURY": "CENTURY",
                    }
                
                @schemas.classproperty
                def S1(cls):
                    return cls("S1")
                
                @schemas.classproperty
                def S2(cls):
                    return cls("S2")
                
                @schemas.classproperty
                def S3(cls):
                    return cls("S3")
                
                @schemas.classproperty
                def S4(cls):
                    return cls("S4")
                
                @schemas.classproperty
                def S5(cls):
                    return cls("S5")
                
                @schemas.classproperty
                def S6(cls):
                    return cls("S6")
                
                @schemas.classproperty
                def S10(cls):
                    return cls("S10")
                
                @schemas.classproperty
                def S12(cls):
                    return cls("S12")
                
                @schemas.classproperty
                def S15(cls):
                    return cls("S15")
                
                @schemas.classproperty
                def S20(cls):
                    return cls("S20")
                
                @schemas.classproperty
                def S30(cls):
                    return cls("S30")
                
                @schemas.classproperty
                def M1(cls):
                    return cls("M1")
                
                @schemas.classproperty
                def M2(cls):
                    return cls("M2")
                
                @schemas.classproperty
                def M3(cls):
                    return cls("M3")
                
                @schemas.classproperty
                def M4(cls):
                    return cls("M4")
                
                @schemas.classproperty
                def M5(cls):
                    return cls("M5")
                
                @schemas.classproperty
                def M6(cls):
                    return cls("M6")
                
                @schemas.classproperty
                def M10(cls):
                    return cls("M10")
                
                @schemas.classproperty
                def M12(cls):
                    return cls("M12")
                
                @schemas.classproperty
                def M15(cls):
                    return cls("M15")
                
                @schemas.classproperty
                def M20(cls):
                    return cls("M20")
                
                @schemas.classproperty
                def M30(cls):
                    return cls("M30")
                
                @schemas.classproperty
                def H1(cls):
                    return cls("H1")
                
                @schemas.classproperty
                def H2(cls):
                    return cls("H2")
                
                @schemas.classproperty
                def H3(cls):
                    return cls("H3")
                
                @schemas.classproperty
                def H4(cls):
                    return cls("H4")
                
                @schemas.classproperty
                def H6(cls):
                    return cls("H6")
                
                @schemas.classproperty
                def H8(cls):
                    return cls("H8")
                
                @schemas.classproperty
                def H12(cls):
                    return cls("H12")
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("DAY")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("WEEK")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
                
                @schemas.classproperty
                def QUARTER(cls):
                    return cls("QUARTER")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("YEAR")
                
                @schemas.classproperty
                def DECADE(cls):
                    return cls("DECADE")
                
                @schemas.classproperty
                def CENTURY(cls):
                    return cls("CENTURY")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'raster':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "assetId": assetId,
                "subtype": subtype,
                "mode": mode,
                "id": id,
                "attribute": attribute,
                "raster": raster,
            }
    
    mode: MetaOapg.properties.mode
    subtype: 'DataSubtype'
    assetId: MetaOapg.properties.assetId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raster"]) -> MetaOapg.properties.raster: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "mode", "id", "attribute", "raster", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> typing.Union[MetaOapg.properties.attribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raster"]) -> typing.Union[MetaOapg.properties.raster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "mode", "id", "attribute", "raster", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mode: typing.Union[MetaOapg.properties.mode, str, ],
        subtype: 'DataSubtype',
        assetId: typing.Union[MetaOapg.properties.assetId, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attribute: typing.Union[MetaOapg.properties.attribute, str, schemas.Unset] = schemas.unset,
        raster: typing.Union[MetaOapg.properties.raster, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Aggregation':
        return super().__new__(
            cls,
            *args,
            mode=mode,
            subtype=subtype,
            assetId=assetId,
            id=id,
            attribute=attribute,
            raster=raster,
            _configuration=_configuration,
            **kwargs,
        )

from eliona/api_client.model.data_subtype import DataSubtype
