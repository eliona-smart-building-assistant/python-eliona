# coding: utf-8

"""
    Eliona API

    API to access Eliona Smart Building Assistant  # noqa: E501

    The version of the OpenAPI document: 2.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eliona.api_client import schemas  # noqa: F401


class AlarmRule(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Rule for an alarm
    """


    class MetaOapg:
        required = {
            "subtype",
            "assetId",
            "attribute",
            "priority",
        }
        
        class properties:
            assetId = schemas.IntSchema
        
            @staticmethod
            def subtype() -> typing.Type['DataSubtype']:
                return DataSubtype
            attribute = schemas.StrSchema
        
            @staticmethod
            def priority() -> typing.Type['AlarmPriority']:
                return AlarmPriority
            
            
            class id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            enable = schemas.BoolSchema
            requiresAcknowledge = schemas.BoolSchema
            
            
            class equal(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'equal':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class low(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'low':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class high(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'high':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class message(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'message':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tags(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class subject(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subject':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class urldoc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urldoc':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notifyOn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notifyOn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dontMask(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dontMask':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def assetInfo() -> typing.Type['Asset']:
                return Asset
            __annotations__ = {
                "assetId": assetId,
                "subtype": subtype,
                "attribute": attribute,
                "priority": priority,
                "id": id,
                "enable": enable,
                "requiresAcknowledge": requiresAcknowledge,
                "equal": equal,
                "low": low,
                "high": high,
                "message": message,
                "tags": tags,
                "subject": subject,
                "urldoc": urldoc,
                "notifyOn": notifyOn,
                "dontMask": dontMask,
                "assetInfo": assetInfo,
            }

    
    subtype: 'DataSubtype'
    assetId: MetaOapg.properties.assetId
    attribute: MetaOapg.properties.attribute
    priority: 'AlarmPriority'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> 'AlarmPriority': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable"]) -> MetaOapg.properties.enable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiresAcknowledge"]) -> MetaOapg.properties.requiresAcknowledge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equal"]) -> MetaOapg.properties.equal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urldoc"]) -> MetaOapg.properties.urldoc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifyOn"]) -> MetaOapg.properties.notifyOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dontMask"]) -> MetaOapg.properties.dontMask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetInfo"]) -> 'Asset': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "attribute", "priority", "id", "enable", "requiresAcknowledge", "equal", "low", "high", "message", "tags", "subject", "urldoc", "notifyOn", "dontMask", "assetInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'DataSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> 'AlarmPriority': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable"]) -> typing.Union[MetaOapg.properties.enable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiresAcknowledge"]) -> typing.Union[MetaOapg.properties.requiresAcknowledge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equal"]) -> typing.Union[MetaOapg.properties.equal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["low"]) -> typing.Union[MetaOapg.properties.low, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["high"]) -> typing.Union[MetaOapg.properties.high, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urldoc"]) -> typing.Union[MetaOapg.properties.urldoc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifyOn"]) -> typing.Union[MetaOapg.properties.notifyOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dontMask"]) -> typing.Union[MetaOapg.properties.dontMask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetInfo"]) -> typing.Union['Asset', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetId", "subtype", "attribute", "priority", "id", "enable", "requiresAcknowledge", "equal", "low", "high", "message", "tags", "subject", "urldoc", "notifyOn", "dontMask", "assetInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        id: typing.Union[MetaOapg.properties.id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable: typing.Union[MetaOapg.properties.enable, bool, schemas.Unset] = schemas.unset,
        requiresAcknowledge: typing.Union[MetaOapg.properties.requiresAcknowledge, bool, schemas.Unset] = schemas.unset,
        equal: typing.Union[MetaOapg.properties.equal, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        low: typing.Union[MetaOapg.properties.low, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        high: typing.Union[MetaOapg.properties.high, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, None, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, None, str, schemas.Unset] = schemas.unset,
        urldoc: typing.Union[MetaOapg.properties.urldoc, None, str, schemas.Unset] = schemas.unset,
        notifyOn: typing.Union[MetaOapg.properties.notifyOn, None, str, schemas.Unset] = schemas.unset,
        dontMask: typing.Union[MetaOapg.properties.dontMask, None, bool, schemas.Unset] = schemas.unset,
        assetInfo: typing.Union['Asset', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlarmRule':
        return super().__new__(
            cls,
            *args,
            id=id,
            enable=enable,
            requiresAcknowledge=requiresAcknowledge,
            equal=equal,
            low=low,
            high=high,
            message=message,
            tags=tags,
            subject=subject,
            urldoc=urldoc,
            notifyOn=notifyOn,
            dontMask=dontMask,
            assetInfo=assetInfo,
            _configuration=_configuration,
            **kwargs,
        )

from eliona/api_client.model.alarm_priority import AlarmPriority
from eliona/api_client.model.asset import Asset
from eliona/api_client.model.data_subtype import DataSubtype
